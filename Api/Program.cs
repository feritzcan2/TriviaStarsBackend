using Api.MagicOnion;
using Api.Service.GameHub.Utils;
using Api.ServiceExtensions;
using MessagePack.Resolvers;
using Microsoft.AspNetCore.Server.Kestrel.Core;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.WebHost.ConfigureKestrel(serverOptions =>
{

    serverOptions.ListenAnyIP(12345, o => o.Protocols =
        HttpProtocols.Http2);

    serverOptions.ListenAnyIP(3000, o => o.Protocols =
        HttpProtocols.Http1);
    serverOptions.ListenAnyIP(5000, o => o.Protocols =
        HttpProtocols.Http1);
});

builder.Services.AddControllers();
builder.Services.AddGameEngine();
builder.Services.AddRepositories();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
StaticCompositeResolver.Instance.Register(
    // This resolver is generated by MagicOnion's code generator.
    StandardResolver.Instance
);
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddGrpc();       // Add this line(Grpc.AspNetCore)
builder.Services.AddMagicOnion((options) =>
{

    options.EnableCurrentContext = true;
    options.MessageSerializer = new MagicOnionMsgPckSerializerProvider();
});


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.MapGet("/", () => "Running... Environment : " + Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT"));

#if RELEASE
    app.UseHttpsRedirection();
#endif
app.UseAuthorization();

app.MapControllers();


app.MapMagicOnionService(); // Add this line

app.Run();




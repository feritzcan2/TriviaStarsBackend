using MessagePack;
using MessagePack.Resolvers;
using Microsoft.AspNetCore.Server.Kestrel.Core;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.WebHost.ConfigureKestrel(serverOptions =>
{
    serverOptions.ListenAnyIP(12345, o => o.Protocols =
        HttpProtocols.Http2);

    serverOptions.ListenAnyIP(5001, o => o.Protocols =
        HttpProtocols.Http1AndHttp2);
});

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
StaticCompositeResolver.Instance.Register(
    // This resolver is generated by MagicOnion's code generator.
    StandardResolver.Instance
);
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddGrpc();       // Add this line(Grpc.AspNetCore)
builder.Services.AddMagicOnion(options =>
{

    options.EnableCurrentContext = true;
    options.SerializerOptions = ContractlessStandardResolver.Options.WithCompression(MessagePackCompression.Lz4BlockArray);

});


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}


#if RELEASE
    app.UseHttpsRedirection();
#endif
app.UseAuthorization();

app.MapControllers();


app.MapMagicOnionService(); // Add this line

app.Run();


